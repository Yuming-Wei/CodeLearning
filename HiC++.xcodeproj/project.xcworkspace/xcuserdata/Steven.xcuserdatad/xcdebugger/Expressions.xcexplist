<?xml version="1.0" encoding="UTF-8"?>
<VariablesViewState
   version = "1.0">
   <ContextStates>
      <ContextState
         contextName = "Solution::countBits(int):main.h">
         <PersistentStrings>
            <PersistentString
               value = "ceil(log2(i))">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Solution::numSquares(int):main.h">
         <PersistentStrings>
            <PersistentString
               value = "ntPerfectSquares[m - i*i] ">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Solution::isPalindrome(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;):main.h">
         <PersistentStrings>
            <PersistentString
               value = "s[i]">
            </PersistentString>
            <PersistentString
               value = "s[j]">
            </PersistentString>
            <PersistentString
               value = "">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Solution::minimumTotal(std::__1::vector&lt;std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt;, std::__1::allocator&lt;std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt; &gt; &gt;&amp;):Solution.hpp">
         <PersistentStrings>
            <PersistentString
               value = "triangle.size()">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Solution::mergeTwoLists(ListNode*, ListNode*):main.h">
         <PersistentStrings>
            <PersistentString
               value = "l1 != NULL">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "compareFunction(int, int):Solution.hpp">
      </ContextState>
      <ContextState
         contextName = "Solution::compareVersion(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;):main.h">
      </ContextState>
      <ContextState
         contextName = "Solution::partition_helper(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, int, int, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt;&amp;, std::__1::vector&lt;std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt;, std::__1::allocator&lt;std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;&amp;):Solution.hpp">
      </ContextState>
      <ContextState
         contextName = "TrieNode::setChild(TrieNode*, char):main.h">
      </ContextState>
      <ContextState
         contextName = "ConnectedCellsInGridClass::read():ConnectedCellsInGrid.h">
         <PersistentStrings>
            <PersistentString
               value = "gridStr">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Solution::addBinary(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;):main.h">
         <PersistentStrings>
            <PersistentString
               value = "b[i] - &apos;0&apos;">
            </PersistentString>
            <PersistentString
               value = "a[i] - &apos;0&apos;">
            </PersistentString>
            <PersistentString
               value = "b[i]">
            </PersistentString>
            <PersistentString
               value = "b[0]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Solution::minPathSum(std::__1::vector&lt;std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt;, std::__1::allocator&lt;std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt; &gt; &gt;&amp;):main.h">
         <PersistentStrings>
            <PersistentString
               value = "grid.size()">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Solution::partition_helper(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, int, int, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt;, std::__1::vector&lt;std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt;, std::__1::allocator&lt;std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;):Solution.hpp">
      </ContextState>
      <ContextState
         contextName = "main:main.cpp">
         <PersistentStrings>
            <PersistentString
               value = "fs.is_open()">
            </PersistentString>
            <PersistentString
               value = "map[nums[i]]">
            </PersistentString>
            <PersistentString
               value = "nums">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Solution::multiply(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;):main.h">
         <PersistentStrings>
            <PersistentString
               value = "answ">
            </PersistentString>
            <PersistentString
               value = "pow(10, len2 - 1 - i)">
            </PersistentString>
            <PersistentString
               value = "line*100000000">
            </PersistentString>
            <PersistentString
               value = "len2 - 1 - i">
            </PersistentString>
            <PersistentString
               value = "line">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Solution::largestNumber(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt;&amp;):Solution.hpp">
      </ContextState>
      <ContextState
         contextName = "Solution::gameOfLife(std::__1::vector&lt;std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt;, std::__1::allocator&lt;std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt; &gt; &gt;&amp;):main.h">
      </ContextState>
      <ContextState
         contextName = "Solution::reverse(ListNode*):main.h">
      </ContextState>
      <ContextState
         contextName = "Solution::getSum(int, int):Solution.hpp">
         <PersistentStrings>
            <PersistentString
               value = "INT_MAX">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "TrieNode::getChildNode(char):main.h">
      </ContextState>
      <ContextState
         contextName = "Solution::findRepeatedDnaSequences(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;):Solution.hpp">
      </ContextState>
      <ContextState
         contextName = "Solution::topKFrequent(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt;&amp;, int):Solution.hpp">
         <PersistentStrings>
            <PersistentString
               value = "">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Solution::containsNearbyAlmostDuplicate(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt;&amp;, int, int):Solution.hpp">
         <PersistentStrings>
            <PersistentString
               value = "myMap.begin()">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "ConnectedCellsInGridClass::run():ConnectedCellsInGrid.h">
         <PersistentStrings>
            <PersistentString
               value = "*it">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Solution::threeSum(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt;&amp;):main.h">
      </ContextState>
      <ContextState
         contextName = "Solution::rob(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt;&amp;):main.h">
      </ContextState>
      <ContextState
         contextName = "Trie::insert(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;):main.h">
         <PersistentStrings>
            <PersistentString
               value = "root">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Solution::insert(std::__1::vector&lt;Interval, std::__1::allocator&lt;Interval&gt; &gt;&amp;, Interval):main.h">
         <PersistentStrings>
            <PersistentString
               value = "(intervals.begin() + i + 1) ==  )intervals.begin() + j)">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Solution::isPalindrome(ListNode*):main.h">
      </ContextState>
   </ContextStates>
</VariablesViewState>
